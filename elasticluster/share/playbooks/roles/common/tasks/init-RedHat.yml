---
- name: Check if EPEL is already configured
  command: rpm -q epel-release
  register: epel_check
  changed_when: false
  failed_when: false

- name: Run EPEL fix script for Rocky Linux 8
  script: fix_epel_rocky8.sh
  when: 
    - is_rocky 
    - ansible_distribution_major_version == '8'
    - epel_check.rc != 0
  register: epel_fix_result

- name: Display EPEL fix script output
  debug:
    var: epel_fix_result
  when: 
    - is_rocky 
    - ansible_distribution_major_version == '8'
    - epel_fix_result.changed

# Original EPEL installation task
- name: enable the EPEL repository (RHEL/CentOS)
  yum:
    name: "https://dl.fedoraproject.org/pub/epel/epel-release-latest-{{ ansible_distribution_major_version }}.noarch.rpm"
    state: present
  when: not is_rocky or epel_fix_result is failed

#
# Set up the package manager and its Ansible module for installing packages
#

- name: Disable SELinux (RHEL-family)
  include_tasks: selinux.yml
  when: 'disable_selinux|bool and ansible_selinux.status == "enabled"'


- name: Is the EPEL repo already available? (RHEL/CentOS)
  stat:
    path: '/etc/yum.repos.d/epel.repo'
    get_attributes: no
    get_checksum: no
    get_mime: no
  register: epel_repo_file


- name: enable the EPEL repository (RHEL/CentOS)
  # based on instructions at: https://support.rackspace.com/how-to/install-epel-and-additional-repositories-on-centos-and-red-hat/
  yum:
    name: 'https://dl.fedoraproject.org/pub/epel/epel-release-latest-{{ansible_distribution_major_version}}.noarch.rpm'
    state: '{{ pkg_install_state }}'
  when: 'not epel_repo_file.stat.exists'


# this is required to have packages like `lua-devel` in RHEL, which
# are in the main repos in CentOS; for more details, see:
# https://stackoverflow.com/a/34671499/459543
- name: Enable "optional" package repository (RHEL)
  command: |
    yum-config-manager --enable rhui-REGION-rhel-server-optional
  ignore_errors: yes
  when: 'is_rhel_compatible and not is_centos'

- name: Install Ansible `pip` module dependencies
  package:
    name: "{{ item }}"
    state: present
  loop: "{{ python_packages }}"
  vars:
    python_packages:
      - "{{ 'python3-setuptools' if is_rocky else 'python-setuptools' }}"
      - "{{ 'python3-virtualenv' if is_rocky else 'python-virtualenv' }}"
      - "{{ 'python3-pip' if is_rocky else 'python-pip' }}"

- name: Upgrade all installed packages to latest version
  yum:
    name: '*'
    state: latest
    update_cache: yes
    # Very slow, especially with dkms/nvidia, and not useful for first boot.
    exclude: "kernel*"
  when: 'upgrade_packages|default(True)|bool'


- name: Provide workaround for https://github.com/ansible/ansible-modules-core/issues/4472
  set_fact:
    __at__: '-'
